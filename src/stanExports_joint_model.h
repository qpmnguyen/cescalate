// Generated by rstantools.  Do not edit by hand.

/*
    cescalate is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    cescalate is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with cescalate.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_joint_model_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'joint_model', line 34, column 4 to column 21)",
                                                      " (in 'joint_model', line 35, column 4 to column 33)",
                                                      " (in 'joint_model', line 36, column 4 to column 33)",
                                                      " (in 'joint_model', line 37, column 4 to column 36)",
                                                      " (in 'joint_model', line 42, column 4 to column 25)",
                                                      " (in 'joint_model', line 46, column 8 to column 23)",
                                                      " (in 'joint_model', line 45, column 18 to line 47, column 5)",
                                                      " (in 'joint_model', line 45, column 4 to line 47, column 5)",
                                                      " (in 'joint_model', line 51, column 8 to column 33)",
                                                      " (in 'joint_model', line 50, column 22 to line 52, column 5)",
                                                      " (in 'joint_model', line 50, column 4 to line 52, column 5)",
                                                      " (in 'joint_model', line 54, column 8 to column 33)",
                                                      " (in 'joint_model', line 53, column 22 to line 55, column 5)",
                                                      " (in 'joint_model', line 53, column 4 to line 55, column 5)",
                                                      " (in 'joint_model', line 75, column 4 to column 25)",
                                                      " (in 'joint_model', line 76, column 4 to column 55)",
                                                      " (in 'joint_model', line 77, column 4 to column 21)",
                                                      " (in 'joint_model', line 78, column 4 to column 33)",
                                                      " (in 'joint_model', line 66, column 4 to column 35)",
                                                      " (in 'joint_model', line 68, column 4 to column 34)",
                                                      " (in 'joint_model', line 72, column 4 to column 43)",
                                                      " (in 'joint_model', line 5, column 4 to column 19)",
                                                      " (in 'joint_model', line 6, column 11 to column 12)",
                                                      " (in 'joint_model', line 6, column 4 to column 17)",
                                                      " (in 'joint_model', line 7, column 10 to column 11)",
                                                      " (in 'joint_model', line 7, column 4 to column 20)",
                                                      " (in 'joint_model', line 10, column 4 to column 23)",
                                                      " (in 'joint_model', line 11, column 4 to column 20)",
                                                      " (in 'joint_model', line 12, column 4 to column 23)",
                                                      " (in 'joint_model', line 13, column 4 to column 22)",
                                                      " (in 'joint_model', line 14, column 10 to column 15)",
                                                      " (in 'joint_model', line 14, column 4 to column 45)",
                                                      " (in 'joint_model', line 15, column 10 to column 15)",
                                                      " (in 'joint_model', line 15, column 4 to column 45)",
                                                      " (in 'joint_model', line 18, column 8 to column 14)",
                                                      " (in 'joint_model', line 19, column 8 to column 14)",
                                                      " (in 'joint_model', line 20, column 8 to column 14)",
                                                      " (in 'joint_model', line 21, column 8 to column 14)",
                                                      " (in 'joint_model', line 27, column 16 to column 29)",
                                                      " (in 'joint_model', line 28, column 16 to column 23)",
                                                      " (in 'joint_model', line 26, column 19 to line 29, column 13)",
                                                      " (in 'joint_model', line 24, column 16 to column 29)",
                                                      " (in 'joint_model', line 25, column 16 to column 23)",
                                                      " (in 'joint_model', line 23, column 27 to line 26, column 13)",
                                                      " (in 'joint_model', line 23, column 12 to line 29, column 13)",
                                                      " (in 'joint_model', line 22, column 22 to line 30, column 9)",
                                                      " (in 'joint_model', line 22, column 8 to line 30, column 9)",
                                                      " (in 'joint_model', line 17, column 4 to line 31, column 5)",
                                                      " (in 'joint_model', line 35, column 20 to column 25)",
                                                      " (in 'joint_model', line 36, column 20 to column 25)",
                                                      " (in 'joint_model', line 42, column 10 to column 11)"};
#include <stan_meta_header.hpp>
class model_joint_model final : public model_base_crtp<model_joint_model> {
private:
  int N;
  Eigen::Matrix<double, -1, 1> Yc;
  std::vector<int> Yb;
  int N_pos;
  int N_neg;
  std::vector<int> n_pos;
  std::vector<int> n_neg;
 
public:
  ~model_joint_model() { }
  
  inline std::string model_name() const final { return "model_joint_model"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_joint_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_joint_model_namespace::model_joint_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 22;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 22;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 22;
      current_statement__ = 22;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 23;
      validate_non_negative_index("Yc", "N", N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","Yc","double",
          context__.to_vec(N));
      Yc = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Yc, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Yc_flat__;
        current_statement__ = 24;
        assign(Yc_flat__, nil_index_list(), context__.vals_r("Yc"),
          "assigning variable Yc_flat__");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 24;
          assign(Yc, cons_list(index_uni(sym1__), nil_index_list()),
            Yc_flat__[(pos__ - 1)], "assigning variable Yc");
          current_statement__ = 24;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 25;
      validate_non_negative_index("Yb", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization","Yb","int",
          context__.to_vec(N));
      Yb = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 26;
      assign(Yb, nil_index_list(), context__.vals_i("Yb"),
        "assigning variable Yb");
      current_statement__ = 27;
      N_pos = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      N_pos = sum(Yb);
      current_statement__ = 29;
      N_neg = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      N_neg = (N - N_pos);
      current_statement__ = 31;
      validate_non_negative_index("n_pos", "N_pos", N_pos);
      current_statement__ = 32;
      n_pos = std::vector<int>(N_pos, std::numeric_limits<int>::min());
      
      current_statement__ = 33;
      validate_non_negative_index("n_neg", "N_neg", N_neg);
      current_statement__ = 34;
      n_neg = std::vector<int>(N_neg, std::numeric_limits<int>::min());
      
      {
        int i;
        i = std::numeric_limits<int>::min();
        
        int j;
        j = std::numeric_limits<int>::min();
        
        current_statement__ = 37;
        i = 1;
        current_statement__ = 38;
        j = 1;
        current_statement__ = 47;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 45;
          if (logical_eq(Yb[(n - 1)], 1)) {
            current_statement__ = 42;
            assign(n_pos, cons_list(index_uni(i), nil_index_list()), n,
              "assigning variable n_pos");
            current_statement__ = 43;
            i = (i + 1);
          } else {
            current_statement__ = 39;
            assign(n_neg, cons_list(index_uni(j), nil_index_list()), n,
              "assigning variable n_neg");
            current_statement__ = 40;
            j = (j + 1);
          }}
      }
      current_statement__ = 27;
      current_statement__ = 27;
      check_greater_or_equal(function__, "N_pos", N_pos, 0);
      current_statement__ = 29;
      current_statement__ = 29;
      check_greater_or_equal(function__, "N_neg", N_neg, 0);
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_greater_or_equal(function__, "n_pos[sym1__]",
                               n_pos[(sym1__ - 1)], 1);}
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_less_or_equal(function__, "n_pos[sym1__]", n_pos[(sym1__ - 1)],
                            N);}
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_greater_or_equal(function__, "n_neg[sym1__]",
                               n_neg[(sym1__ - 1)], 1);}
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
        current_statement__ = 34;
        current_statement__ = 34;
        check_less_or_equal(function__, "n_neg[sym1__]", n_neg[(sym1__ - 1)],
                            N);}
      current_statement__ = 49;
      validate_non_negative_index("z_pos", "N_pos", N_pos);
      current_statement__ = 50;
      validate_non_negative_index("z_neg", "N_neg", N_neg);
      current_statement__ = 51;
      validate_non_negative_index("z", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 2;
      num_params_r__ += N_pos;
      num_params_r__ += N_neg;
      num_params_r__ += ((2 * (2 - 1)) / 2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_joint_model_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, 1, -1> mu;
      mu = Eigen::Matrix<local_scalar_t__, 1, -1>(2);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      mu = in__.row_vector(2);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_pos;
      z_pos = Eigen::Matrix<local_scalar_t__, -1, 1>(N_pos);
      stan::math::fill(z_pos, DUMMY_VAR__);
      
      current_statement__ = 2;
      z_pos = in__.vector(N_pos);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(z_pos, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_pos[(sym1__ - 1)], 0, lp__),
            "assigning variable z_pos");
        } else {
          current_statement__ = 2;
          assign(z_pos, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_pos[(sym1__ - 1)], 0),
            "assigning variable z_pos");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> z_neg;
      z_neg = Eigen::Matrix<local_scalar_t__, -1, 1>(N_neg);
      stan::math::fill(z_neg, DUMMY_VAR__);
      
      current_statement__ = 3;
      z_neg = in__.vector(N_neg);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(z_neg, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::ub_constrain(z_neg[(sym1__ - 1)], 0, lp__),
            "assigning variable z_neg");
        } else {
          current_statement__ = 3;
          assign(z_neg, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::ub_constrain(z_neg[(sym1__ - 1)], 0),
            "assigning variable z_neg");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> L_sigma;
      L_sigma = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      stan::math::fill(L_sigma, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_sigma_in__;
      L_sigma_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((2 * (2 - 1)) /
                                                              2));
      stan::math::fill(L_sigma_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_sigma_in__ = in__.vector(((2 * (2 - 1)) / 2));
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        assign(L_sigma, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_sigma_in__, 2, lp__),
          "assigning variable L_sigma");
      } else {
        current_statement__ = 4;
        assign(L_sigma, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_sigma_in__, 2),
          "assigning variable L_sigma");
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> z;
      z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 6;
        assign(z,
          cons_list(index_uni(i), cons_list(index_uni(1), nil_index_list())),
          Yc[(i - 1)], "assigning variable z");}
      current_statement__ = 11;
      for (int i = 1; i <= N_pos; ++i) {
        current_statement__ = 9;
        assign(z,
          cons_list(index_uni(n_pos[(i - 1)]),
            cons_list(index_uni(2), nil_index_list())), z_pos[(i - 1)],
          "assigning variable z");}
      current_statement__ = 14;
      for (int i = 1; i <= N_neg; ++i) {
        current_statement__ = 12;
        assign(z,
          cons_list(index_uni(n_neg[(i - 1)]),
            cons_list(index_uni(2), nil_index_list())), z_neg[(i - 1)],
          "assigning variable z");}
      {
        current_statement__ = 19;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(L_sigma, 4));
        current_statement__ = 20;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(mu), 0, 100));
        current_statement__ = 21;
        lp_accum__.add(multi_normal_cholesky_lpdf<propto__>(z, mu, L_sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_joint_model_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, 1, -1> mu;
      mu = Eigen::Matrix<double, 1, -1>(2);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      mu = in__.row_vector(2);
      Eigen::Matrix<double, -1, 1> z_pos;
      z_pos = Eigen::Matrix<double, -1, 1>(N_pos);
      stan::math::fill(z_pos, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      z_pos = in__.vector(N_pos);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
        current_statement__ = 2;
        assign(z_pos, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(z_pos[(sym1__ - 1)], 0),
          "assigning variable z_pos");}
      Eigen::Matrix<double, -1, 1> z_neg;
      z_neg = Eigen::Matrix<double, -1, 1>(N_neg);
      stan::math::fill(z_neg, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      z_neg = in__.vector(N_neg);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
        current_statement__ = 3;
        assign(z_neg, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::ub_constrain(z_neg[(sym1__ - 1)], 0),
          "assigning variable z_neg");}
      Eigen::Matrix<double, -1, -1> L_sigma;
      L_sigma = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(L_sigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_sigma_in__;
      L_sigma_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((2 * (2 - 1)) /
                                                              2));
      stan::math::fill(L_sigma_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_sigma_in__ = in__.vector(((2 * (2 - 1)) / 2));
      current_statement__ = 4;
      assign(L_sigma, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_sigma_in__, 2),
        "assigning variable L_sigma");
      std::vector<Eigen::Matrix<double, -1, 1>> z;
      z = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
        vars__.emplace_back(z_pos[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
        vars__.emplace_back(z_neg[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(
            rvalue(L_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L_sigma"));
        }}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 6;
        assign(z,
          cons_list(index_uni(i), cons_list(index_uni(1), nil_index_list())),
          Yc[(i - 1)], "assigning variable z");}
      current_statement__ = 11;
      for (int i = 1; i <= N_pos; ++i) {
        current_statement__ = 9;
        assign(z,
          cons_list(index_uni(n_pos[(i - 1)]),
            cons_list(index_uni(2), nil_index_list())), z_pos[(i - 1)],
          "assigning variable z");}
      current_statement__ = 14;
      for (int i = 1; i <= N_neg; ++i) {
        current_statement__ = 12;
        assign(z,
          cons_list(index_uni(n_neg[(i - 1)]),
            cons_list(index_uni(2), nil_index_list())), z_neg[(i - 1)],
          "assigning variable z");}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(z[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> Sigma;
      Sigma = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(Sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      assign(Sigma, nil_index_list(),
        multiply_lower_tri_self_transpose(L_sigma),
        "assigning variable Sigma");
      double pt;
      pt = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      pt = normal_cdf(mu[(2 - 1)], 0, 1);
      current_statement__ = 15;
      current_statement__ = 15;
      check_corr_matrix(function__, "Sigma", Sigma);
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "pt", pt, 0);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(
            rvalue(Sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Sigma"));}}
      vars__.emplace_back(pt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, 1, -1> mu;
      mu = Eigen::Matrix<double, 1, -1>(2);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        assign(mu_flat__, nil_index_list(), context__.vals_r("mu"),
          "assigning variable mu_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 1;
          assign(mu, cons_list(index_uni(sym1__), nil_index_list()),
            mu_flat__[(pos__ - 1)], "assigning variable mu");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_pos;
      z_pos = Eigen::Matrix<double, -1, 1>(N_pos);
      stan::math::fill(z_pos, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_pos_flat__;
        current_statement__ = 2;
        assign(z_pos_flat__, nil_index_list(), context__.vals_r("z_pos"),
          "assigning variable z_pos_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
          current_statement__ = 2;
          assign(z_pos, cons_list(index_uni(sym1__), nil_index_list()),
            z_pos_flat__[(pos__ - 1)], "assigning variable z_pos");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_pos_free__;
      z_pos_free__ = Eigen::Matrix<double, -1, 1>(N_pos);
      stan::math::fill(z_pos_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
        current_statement__ = 2;
        assign(z_pos_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(z_pos[(sym1__ - 1)], 0),
          "assigning variable z_pos_free__");}
      Eigen::Matrix<double, -1, 1> z_neg;
      z_neg = Eigen::Matrix<double, -1, 1>(N_neg);
      stan::math::fill(z_neg, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_neg_flat__;
        current_statement__ = 3;
        assign(z_neg_flat__, nil_index_list(), context__.vals_r("z_neg"),
          "assigning variable z_neg_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
          current_statement__ = 3;
          assign(z_neg, cons_list(index_uni(sym1__), nil_index_list()),
            z_neg_flat__[(pos__ - 1)], "assigning variable z_neg");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_neg_free__;
      z_neg_free__ = Eigen::Matrix<double, -1, 1>(N_neg);
      stan::math::fill(z_neg_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
        current_statement__ = 3;
        assign(z_neg_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::ub_free(z_neg[(sym1__ - 1)], 0),
          "assigning variable z_neg_free__");}
      Eigen::Matrix<double, -1, -1> L_sigma;
      L_sigma = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(L_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_sigma_flat__;
        current_statement__ = 4;
        assign(L_sigma_flat__, nil_index_list(), context__.vals_r("L_sigma"),
          "assigning variable L_sigma_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 4;
            assign(L_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_sigma_flat__[(pos__ - 1)], "assigning variable L_sigma");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_sigma_free__;
      L_sigma_free__ = Eigen::Matrix<double, -1, 1>(((2 * (2 - 1)) / 2));
      stan::math::fill(L_sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(L_sigma_free__, nil_index_list(),
        stan::math::cholesky_corr_free(L_sigma),
        "assigning variable L_sigma_free__");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
        vars__.emplace_back(z_pos_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
        vars__.emplace_back(z_neg_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
        vars__.emplace_back(L_sigma_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mu");
    names__.emplace_back("z_pos");
    names__.emplace_back("z_neg");
    names__.emplace_back("L_sigma");
    names__.emplace_back("z");
    names__.emplace_back("Sigma");
    names__.emplace_back("pt");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_pos)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_neg)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2),
                                             static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_pos" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_neg" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "pt");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_pos; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_pos" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_neg; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_neg" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ((2 * (2 - 1)) / 2); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "pt");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"z_pos\",\"type\":{\"name\":\"vector\",\"length\":" << N_pos << "},\"block\":\"parameters\"},{\"name\":\"z_neg\",\"type\":{\"name\":\"vector\",\"length\":" << N_neg << "},\"block\":\"parameters\"},{\"name\":\"L_sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "},\"block\":\"generated_quantities\"},{\"name\":\"pt\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"z_pos\",\"type\":{\"name\":\"vector\",\"length\":" << N_pos << "},\"block\":\"parameters\"},{\"name\":\"z_neg\",\"type\":{\"name\":\"vector\",\"length\":" << N_neg << "},\"block\":\"parameters\"},{\"name\":\"L_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << ((2 * (2 - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"vector\",\"length\":" << ((2 * (2 - 1)) / 2) << "},\"block\":\"generated_quantities\"},{\"name\":\"pt\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_joint_model_namespace::model_joint_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_joint_model_namespace::profiles__;
}
#endif
#endif
